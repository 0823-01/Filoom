<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="movieMapper">

	<!-- 
		Reply 테이블로부터 조회된 ResultSet을
		Reply VO 타입으로 옮겨주는 ResultMap
	-->
	
	<resultMap id="movieResultSet" type="movie">
		<id column="MOVIE_NO" property="movieNo" />
		<result column="MOVIE_TITLE" property="movieTitle" />
		<result column="PREMIERE" property="premiere" />
		<result column="OPEN_DATE" property="openDate" />
		<result column="DIRECTOR" property="director" />
		<result column="GENRE" property="genre" />
		<result column="RUNTIME" property="runtime" />
		<result column="SCREEN_TYPE" property="screenType" />
		<result column="FILM_RATE" property="filmRate" />
		<result column="DESCRIPTION" property="description" />
		<result column="STARRING" property="starring" />
		<result column="STATUS" property="status" />
		<result column="TRAILER" property="trailer"/>
		
		<!-- 포스터정보,상영정보,상영관정보 추가(결제페이지-형문) -->
		<result column="IMAGE_PATH" property="imagePath"/>
		<result column="FILE_CODENAME" property="fileCodename"/>
		<result column="FILE_LEVEL" property="fileLevel"/>
		<result column="PLAYING_NO" property="playingNo"/>
		<result column="PLAYTIME" property="playTime"/>
		<result column="SCREEN_NAME" property="screenName"/>
		<result column="SCREEN_INFO" property="screenInfo"/>
		
		
	</resultMap>
	
	<resultMap id ="posterResultSet" type="poster">
		<id column="IMAGE_ID" property="imageId"/>
		<result column="MOVIE_NO" property="movieNo"/>
		<result column="FILE_NAME" property="fileName"/>
		<result column="FILE_CODENAME" property="fileCodename"/>
		<result column="IMAGE_PATH" property="imagePath"/>
		<result column="UPLOAD_DATE" property="uploadDate"/>
		<result column="FILE_LEVEL" property="fileLevel"/>
		<result column="STATUS" property="status"/>	
	</resultMap>
	
	<resultMap id="movieWithPosterFlatResultMap" type="movie">
	    <id column="MOVIE_NO" property="movieNo" />
	    <result column="MOVIE_TITLE" property="movieTitle" />
	    <result column="DESCRIPTION" property="description" />
	    <result column="IMAGE_PATH" property="imagePath" />
	    <result column="FILE_CODENAME" property="fileCodename" />
	    <result column="FILE_LEVEL" property="fileLevel"/>
	</resultMap>
	
	
	<!-- 이거 영화 예매 페이지 첫페이지 정보 가져오기 -->
	<select id ="selectList" resultMap="movieResultSet">
		SELECT M.MOVIE_NO
		     , M.MOVIE_TITLE
		     , M.PREMIERE
		     , TO_CHAR(M.OPEN_DATE, 'YYYY MM DD') AS OPEN_DATE
		     , M.RUNTIME
		     , M.SCREEN_TYPE
		     , M.FILM_RATE
		     , M.DESCRIPTION
		     , M.STARRING
		     , M.STATUS
		     , P.IMAGE_PATH
		     , P.FILE_CODENAME
		FROM MOVIE M
		LEFT JOIN POSTER P
		ON M.MOVIE_NO = P.MOVIE_NO
		   AND P.FILE_LEVEL = 1
	   WHERE M.STATUS = 'Y'
	</select>
	
	<select id = "selectFirstMovie" resultMap="movieResultSet">
		SELECT M.MOVIE_NO
		     , M.MOVIE_TITLE
		     , M.PREMIERE
		     , M.OPEN_DATE
		     , M.RUNTIME
		     , M.SCREEN_TYPE
		     , M.FILM_RATE
		     , CASE 
			        WHEN LENGTH(M.DESCRIPTION) > 120 THEN SUBSTR(M.DESCRIPTION, 1, 120) || '...'
			        ELSE M.DESCRIPTION
		       END AS DESCRIPTION
		     , M.STARRING
		     , M.STATUS
		     , P.IMAGE_PATH
		     , P.FILE_LEVEL
		     , P.FILE_CODENAME
		FROM MOVIE M
		JOIN POSTER P 
		    ON M.MOVIE_NO = P.MOVIE_NO
		WHERE M.STATUS = 'Y'
		  AND M.MOVIE_NO = (SELECT MIN(MOVIE_NO)
		                    FROM MOVIE
		                    WHERE STATUS = 'Y')
	
	</select>
	
	<select id = "selectSearchFirstMovie" parameterType="hashmap" resultMap="movieResultSet">
		
		SELECT M.MOVIE_NO
		     , M.MOVIE_TITLE
		     , M.PREMIERE
		     , M.OPEN_DATE
		     , M.RUNTIME
		     , M.SCREEN_TYPE
		     , M.FILM_RATE
		     , CASE 
			        WHEN LENGTH(M.DESCRIPTION) > 120 THEN SUBSTR(M.DESCRIPTION, 1, 120) || '...'
			        ELSE M.DESCRIPTION
		       END AS DESCRIPTION
		     , M.STARRING
		     , M.STATUS
		     , P.IMAGE_PATH
		     , P.FILE_LEVEL
		     , P.FILE_CODENAME
		FROM MOVIE M
		JOIN POSTER P 
		    ON M.MOVIE_NO = P.MOVIE_NO
		WHERE M.STATUS = 'Y'
		  AND M.MOVIE_NO = (
		        SELECT MIN(MOVIE_NO)
		        FROM MOVIE
		        WHERE STATUS = 'Y'
		          AND MOVIE_TITLE LIKE '%' || #{searchMovieKeyword} || '%'
		    )
	
	</select>
	
	<!-- 이거 영화 예매 페이지 첫페이지 상세정보 가져오기 -->
	<select id = "selectMovie" parameterType="_int" resultMap="movieWithPosterFlatResultMap">
	
		SELECT 
		    M.MOVIE_NO,
		    M.MOVIE_TITLE,
		    CASE 
		        WHEN LENGTH(M.DESCRIPTION) > 120 THEN SUBSTR(M.DESCRIPTION, 1, 120) || '...'
		        ELSE M.DESCRIPTION
		    END AS DESCRIPTION,
		    P.IMAGE_PATH,
		    P.FILE_CODENAME,
		    P.FILE_LEVEL
		FROM 
		    FILOOM.MOVIE M
		LEFT JOIN 
		    FILOOM.POSTER P
		ON 
		    M.MOVIE_NO = P.MOVIE_NO
		WHERE 
		
		    M.MOVIE_NO = #{movieNo}
	
	</select>

	<!-- 예매페이지 검색 기능 -->
	<select id = "movieSearch" parameterType="hashmap" resultMap="movieResultSet">
		
		SELECT M.MOVIE_NO
		     , M.MOVIE_TITLE
		     , M.PREMIERE
		     , TO_CHAR(M.OPEN_DATE, 'YYYY MM DD') AS OPEN_DATE
		     , M.RUNTIME
		     , M.SCREEN_TYPE
		     , M.FILM_RATE
		     , M.DESCRIPTION
		     , M.STARRING
		     , M.STATUS
		     , P.IMAGE_PATH
		     , P.FILE_CODENAME
		FROM MOVIE M
		LEFT JOIN POSTER P
		ON M.MOVIE_NO = P.MOVIE_NO
		   AND P.FILE_LEVEL = 1
		WHERE M.MOVIE_TITLE LIKE '%' || #{searchMovieKeyword} || '%'
		  AND M.STATUS = 'Y'
		 
	
	</select>


	<!-- 결제페이지 : 영화,상영정보 조회 -->
	<select id="selectMovieForPlayingNo" parameterType="hashmap" resultMap="movieResultSet">
		SELECT MOVIE_NO, MOVIE_TITLE, DIRECTOR, GENRE, RUNTIME, FILM_RATE, FILE_CODENAME, IMAGE_PATH, PLAYING_NO, PLAYTIME,SCREEN_NAME, SCREEN_INFO
		  FROM MOVIE M 
		  JOIN POSTER  USING(MOVIE_NO)
		  JOIN PLAYING  USING(MOVIE_NO)
		  JOIN SCREEN USING(SCREEN_NO)
		 WHERE PLAYING_NO = #{playingNo}
		   AND FILE_LEVEL = 1
	</select>

	
	<!-- 작품 수 체크(필터링 없음) -->
	<!-- 전체 (사용자 / 관리자) -->
	<select id="checkVideoCount" resultType="_int">
		SELECT COUNT(*) FROM MOVIE
		WHERE STATUS = 'Y'
	</select>
	
	<!-- 개봉작만 (사용자 / 관리자) -->
	<select id="checkOpenedVideoCount" resultType="_int">
		SELECT COUNT(*) FROM MOVIE
		WHERE STATUS = 'Y' AND PREMIERE = 'Y'
	</select>
	
	<!-- 미개봉작만 (사용자) -->
	<select id="checkNotOpenVideoCount" resultType="_int">
		SELECT COUNT(*) FROM MOVIE
		WHERE STATUS = 'Y' AND PREMIERE = 'N'
	</select>
	
	<!--  ===== BOXOFFICE 목록 조회 ===== -->
	<!-- 전체 조회 (4x4) -->
	<!-- USING을 썼기 때문에 M.MOVIE_NO가 아닌 MOVIE_NO로 SELECT했음
		└ M.MOVIE_NO로 쓰면 오류남 (ORA-21254)
		이후의 목록 조회 테이블도 마찬가지로 USING을 사용함 -->
	<!-- selectNowPlaying과 합쳐서 동적 쿼리로 쓰고 싶어서 알아보는 중 -->
	<select id="selectBoxOffice" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
           				THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
               			ELSE MOVIE_TITLE
       				END AS MOVIE_TITLE,
					PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE", FILM_RATE,
					P.IMAGE_PATH, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND P.FILE_LEVEL = 1
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	<!-- 개봉작만 조회 -->
	<select id="selectNowPlaying" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
		            FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'Y' AND P.FILE_LEVEL = 1
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	<!-- 개봉순 정렬 (페이징 처리 포함) -->
	<select id="listbyOpenedOrder" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
	            		THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
	                	ELSE MOVIE_TITLE
	            	END AS MOVIE_TITLE,				
					PREMIERE,
					TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
					FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'Y' AND P.FILE_LEVEL = 1
				ORDER BY OPEN_DATE	
			) A
		)
		WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	<!-- 평점순 정렬 (review와 조인 필요) -->
	<!-- <select id="listbyCritics" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT M.MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
					FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN REVIEW R USING (MOVIE_NO)
					JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'Y' AND P.FILE_LEVEL = 1
				ORDER BY (SELECT AVG(SCORE) FROM REVIEW WHERE MOVIE_NO = M.MOVIE_NO)
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select> -->
	
	<!-- 가나다순 정렬 (전체) -->
	<select id="listbyName" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
		            FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND P.FILE_LEVEL = 1
				ORDER BY MOVIE_TITLE
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	<!-- 가나다순 정렬 (개봉작만) -->
	<select id="listbyNamePlaying" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
		            FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'Y' AND P.FILE_LEVEL = 1
				ORDER BY MOVIE_TITLE
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}	
	</select>
	
	<!-- ===== 상영 예정작 목록 조회 ===== -->
	<!-- 개봉예정일 순서로 정렬 (기본 정렬 기준) -->
	<select id="listbyOpenOrder" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (		
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
		            FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'N' AND P.FILE_LEVEL = 1	
				ORDER BY OPEN_DATE
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	<!-- 가나다순 정렬 -->
	<select id="listbyNamePre" parameterType="int" resultMap="movieResultSet">
		SELECT * FROM (		
			SELECT ROWNUM RNUM, A.* FROM (
				SELECT MOVIE_NO,
					CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
		            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
		                ELSE MOVIE_TITLE
		            END AS MOVIE_TITLE,
		            PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
		            FILM_RATE, P.FILE_CODENAME
				FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
				WHERE M.STATUS = 'Y' AND PREMIERE = 'N' AND P.FILE_LEVEL = 1
				ORDER BY MOVIE_TITLE
			) A
		) WHERE RNUM BETWEEN 16*(#{cpage}-1)+1 AND 16*#{cpage}
	</select>
	
	
	<!-- 영화 탭 HOME -->
	<!-- 박스 오피스 관리자 등록 빠른 순으로 4개
		추후 표기 기준 수정 예정. 개인적으로 예매순 하고 싶으나 아직 보류 상태 -->
	<select id="selectNow4" resultMap="movieResultSet">
		SELECT * FROM (
		    SELECT MOVIE_NO,
			    CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
	            	THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
	                ELSE MOVIE_TITLE
	            END AS MOVIE_TITLE,
            	PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
            	FILM_RATE, P.FILE_CODENAME
		    FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
		    WHERE M.STATUS = 'Y' AND P.FILE_LEVEL = 1
		    ORDER BY MOVIE_NO DESC
		) WHERE ROWNUM BETWEEN 1 AND 4
	</select>
	
	<!-- 개봉예정일이 가까운 순으로 4개 -->
	<select id="comingVerySoon" resultMap="movieResultSet">
		select rownum, a.* from (
			SELECT MOVIE_NO,
			    CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
			        THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
			        ELSE MOVIE_TITLE
			    END AS MOVIE_TITLE,
			    PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
			    FILM_RATE, P.FILE_CODENAME
			FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
			WHERE M.STATUS = 'Y' AND PREMIERE = 'N' AND P.FILE_LEVEL = 1
				AND ROWNUM BETWEEN 1 AND 4	
		ORDER BY OPEN_DATE) a
	</select>
	
	<!-- 제목으로 영화 검색 : 정렬 기준은 MOVIE_NO DESC 하나로 고정
		hashmap = (String keyword, (int→)String status) -->
	<select id="searchMovie" parameterType="hashmap" resultMap="movieResultSet">
		SELECT MOVIE_NO,
			    CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
			        THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
			        ELSE MOVIE_TITLE
			    END AS MOVIE_TITLE,
			    PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
			    FILM_RATE, P.FILE_CODENAME
	    FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
	    WHERE M.STATUS = 'Y'
	    <choose>
	    	<when test="status == 1">
	    		AND PREMIERE = 'Y'
	    	</when>
	    	<when test="status == 2">
	    		AND PREMIERE = 'N'
	    	</when>
	    </choose>
	     AND P.FILE_LEVEL = 1
	    	AND MOVIE_TITLE LIKE '%' || #{keyword} || '%'
	    ORDER BY MOVIE_NO DESC
	</select>
	
	<!-- 개봉 예정작 - 제목으로 영화 검색
	<select id="searchFromPreOpen" parameterType="string" resultMap="movieResultSet">
		SELECT MOVIE_NO,
			    CASE WHEN (LENGTH(MOVIE_TITLE) > 9)
			        THEN SUBSTR(MOVIE_TITLE,1,9) || '...'
			        ELSE MOVIE_TITLE
			    END AS MOVIE_TITLE,
			    PREMIERE, TO_CHAR(OPEN_DATE,'YYYY.MM.DD') AS "OPEN_DATE",
			    FILM_RATE, P.FILE_CODENAME
	    FROM MOVIE M JOIN POSTER P USING (MOVIE_NO)
	    WHERE M.STATUS = 'Y' AND PREMIERE = 'N' AND P.FILE_LEVEL = 1
	    	AND MOVIE_TITLE LIKE '%' || #{keyword} || '%'
	    ORDER BY MOVIE_NO DESC
	</select>
	-->
	
	<!-- 영화 페이지 상세 보기 -->
	<select id = "showDetail" parameterType="int" resultMap="movieResultSet">

		SELECT MOVIE_NO,
		    MOVIE_TITLE,
		    OPEN_DATE,
		    DIRECTOR,
		    GENRE,
		    RUNTIME,
		    SCREEN_TYPE,
		    FILM_RATE,
		    DESCRIPTION,
		    STARRING,
		    STATUS,
		    TRAILER
		FROM MOVIE
		WHERE MOVIE_NO = #{movieNo}
	
	
	</select>

</mapper>
